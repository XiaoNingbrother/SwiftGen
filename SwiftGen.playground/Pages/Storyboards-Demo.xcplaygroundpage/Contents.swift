//: #### Other pages
//:
//: * [Demo for `swiftgen colors`](Colors-Demo)
//: * [Demo for `swiftgen fonts`](Fonts-Demo)
//: * Demo for `swiftgen storyboards`
//: * [Demo for `swiftgen strings`](Strings-Demo)
//: * [Demo for `swiftgen xcassets`](XCAssets-Demo)

class CreateAccViewController: UIViewController {}

//: #### Example of code generated by swiftgen-storyboards

// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

import Foundation
import UIKit

protocol StoryboardType {
    static var storyboardName: String { get }
}

extension StoryboardType {
	static var storyboard: UIStoryboard {
		return UIStoryboard(name: self.storyboardName, bundle: Bundle(for: BundleToken.self))
	}
}

struct SceneType<T: Any> {
	let storyboard: StoryboardType.Type
	let identifier: String
	
	var controller: T {
		guard let controller = storyboard.storyboard.instantiateViewController(withIdentifier: identifier) as? T else {
			fatalError("Controller '\(identifier)' is not of the expected class \(T.self).")
		}
		return controller
	}
}

struct InitialSceneType<T: Any> {
	let storyboard: StoryboardType.Type
	
	var controller: T {
		guard let controller = storyboard.storyboard.instantiateInitialViewController() as? T else {
			fatalError("Controller is not of the expected class \(T.self).")
		}
		return controller
	}
}

protocol SegueType: RawRepresentable { }

extension UIViewController {
	func perform<S: SegueType>(segue: S, sender: Any? = nil) where S.RawValue == String {
		performSegue(withIdentifier: segue.rawValue, sender: sender)
	}
}

struct StoryboardScene {
    enum Wizard: StoryboardType {
        static let storyboardName = "Wizard"

        static let initialScene = InitialSceneType<CreateAccViewController>(storyboard: Wizard.self)

        static let acceptCGU = SceneType<UIViewController>(storyboard: Wizard.self, identifier: "Accept-CGU")

		static let createAccount = SceneType<CreateAccViewController>(storyboard: Wizard.self, identifier: "CreateAccount")
		
		static let preferences = SceneType<UITableViewController>(storyboard: Wizard.self, identifier: "Preferences")
		
		static let validatePassword = SceneType<UIViewController>(storyboard: Wizard.self, identifier: "Validate_Password")
    }
}

struct StoryboardSegue {
    enum Wizard: String, SegueType {
        case showPassword = "ShowPassword"
    }
}

private final class BundleToken {}

//: #### Usage Example

let createAccountVC = StoryboardScene.Wizard.createAccount.controller
type(of: createAccountVC)
createAccountVC.title

let validateVC = StoryboardScene.Wizard.validatePassword.controller
validateVC.title

let segue = StoryboardSegue.Wizard.showPassword
createAccountVC.perform(segue: segue)

switch segue {
  case .showPassword:
    print("Working! ðŸŽ‰")
  default:
    print("Not working! ðŸ˜±")
}

/*******************************************************************************
This is a Â«real worldÂ» example of how you can benefit from the generated enum;
you can easily switch or directly compare the passed in `segue` with the corresponding
segues for a specific storyboard.
*******************************************************************************/
//override func prepareForSegue(_ segue: UIStoryboardSegue, sender sender: AnyObject?) {
//  switch UIStoryboard.Segue.Message(rawValue: segue.identifier ?? "")! {
//  case .custom:
//    // Prepare for your custom segue transition
//  case .nonCustom:
//    // Pass in information to the destination View Controller
//  }
//}
